generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumMovementsType {
  SALE
  ADD_TO_STOCK
  REMOVE_FROM_STOCK
}

enum EnumPaymentMethodType {
  PIX
  DEBIT
  CREDIT
  CASH
}

model Product {
  id                String    @id @default(uuid())
  name              String    @db.VarChar(256)
  nameNormalized    String    @db.VarChar(256)
  image             String?   @db.VarChar(256)
  description       String?   @db.VarChar(256)
  userId            String
  stockQuantity     Int
  minimumIdealStock Int?
  unitPrice         Decimal   @db.Decimal(10, 2)
  positionInStock   String?   @db.VarChar(256)
  expirationDate    DateTime?
  createdAt         DateTime  @default(now()) @db.Timestamptz(3)
  deletedAt         DateTime? @db.Timestamptz(3)
  updatedAt         DateTime  @default(now()) @db.Timestamptz(3)
  productionCost    Decimal?  @db.Decimal(10, 2)

  productCategory ProductCategory[]
  movements       Movement[]
  productSupplier ProductSupplier[]

  @@index([createdAt])
  @@index([userId])
}

model Supplier {
  id             String    @id @default(uuid())
  name           String    @db.VarChar(256)
  cnpj           String?   @db.VarChar(256)
  image          String?   @db.VarChar(256)
  nameNormalized String    @db.VarChar(256)
  address        String?   @db.VarChar(256)
  phone          String?   @db.VarChar(256)
  email          String?   @db.VarChar(256)
  userId         String
  createdAt      DateTime  @default(now()) @db.Timestamptz(3)
  deletedAt      DateTime? @db.Timestamptz(3)
  updatedAt      DateTime  @default(now()) @db.Timestamptz(3)

  productSupplier ProductSupplier[]

  @@index([createdAt])
  @@index([userId])
}

model Movement {
  id                    String                 @id @default(uuid())
  movementType          EnumMovementsType
  quantity              Int
  productId             String
  productName           String                 @db.VarChar(256)
  productNameNormalized String                 @db.VarChar(256)
  userId                String
  createdAt             DateTime               @default(now()) @db.Timestamptz(3)
  deletedAt             DateTime?              @db.Timestamptz(3)
  updatedAt             DateTime               @default(now()) @db.Timestamptz(3)
  movementValue         Decimal?               @db.Decimal(10, 2)
  paymentMethod         EnumPaymentMethodType?

  product Product @relation(fields: [productId], references: [id])

  @@index([createdAt(sort: Desc)])
  @@index([movementType])
  @@index([userId])
  @@index([productId])
}

model Category {
  id              String            @id @default(uuid())
  name            String            @db.VarChar(256)
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  deletedAt       DateTime?         @db.Timestamptz(3)
  updatedAt       DateTime          @default(now()) @db.Timestamptz(3)
  productCategory ProductCategory[]
}

model ProductCategory {
  productId  String
  categoryId String

  product  Product  @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model ProductSupplier {
  productId  String
  supplierId String

  product  Product  @relation(fields: [productId], references: [id])
  supplier Supplier @relation(fields: [supplierId], references: [id])

  @@id([productId, supplierId])
}
