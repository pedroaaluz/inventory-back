datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "linux-arm64-openssl-1.0.x"]
}

enum EnumMovementsType {
  SALE
  ADD_TO_STOCK
  REMOVE_FROM_STOCK
}

enum EnumPaymentMethodType {
  PIX
  DEBIT
  CREDIT
  CASH
}

model Product {
  id              String    @id @default(uuid())
  name            String
  nameNormalized  String
  image           String?
  description     String?
  userId          String
  stockQuantity   Int
  unitPrice       Decimal   @db.Decimal(1000, 2)
  positionInStock String?
  expirationDate  DateTime?
  createdAt       DateTime  @default(now()) @db.Timestamptz(3)
  deletedAt       DateTime? @db.Timestamptz(3)
  updatedAt       DateTime  @default(now()) @db.Timestamptz(3)

  productCategory ProductCategory[]
  movements       Movement[]
  productSupplier ProductSupplier[]

  @@index([createdAt])
  @@index([userId])
}

model Supplier {
  id             String    @id @default(uuid())
  name           String
  nameNormalized String
  address        String?
  phone          String?
  email          String?
  userId         String
  createdAt      DateTime  @default(now()) @db.Timestamptz(3)
  deletedAt      DateTime? @db.Timestamptz(3)
  updatedAt      DateTime  @default(now()) @db.Timestamptz(3)

  productSupplier ProductSupplier[]

  @@index([createdAt])
  @@index([userId])
}

model Movement {
  id                    String            @id @default(uuid())
  movementType          EnumMovementsType
  quantity              Int
  productId             String
  productName           String
  productNameNormalized String
  userId                String
  createdAt             DateTime          @default(now()) @db.Timestamptz(3)
  deletedAt             DateTime?         @db.Timestamptz(3)
  updatedAt             DateTime          @default(now()) @db.Timestamptz(3)

  product Product @relation(fields: [productId], references: [id])

  @@index([createdAt(sort: Desc)])
  @@index([movementType])
  @@index([userId])
  @@index([productId])
}

model Category {
  id              String            @id @default(uuid())
  name            String
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  deletedAt       DateTime?         @db.Timestamptz(3)
  updatedAt       DateTime          @default(now()) @db.Timestamptz(3)
  productCategory ProductCategory[]
}

model ProductCategory {
  productId  String
  categoryId String

  product  Product  @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model ProductSupplier {
  productId  String
  supplierId String

  product  Product  @relation(fields: [productId], references: [id])
  supplier Supplier @relation(fields: [supplierId], references: [id])

  @@id([productId, supplierId])
}
